import React, { useState, useEffect, useCallback } from "react";
import { useQuery } from "@tanstack/react-query";
import { Card } from "@/components/ui/card";
import { Search } from "@/components/weather/search";
import { CurrentWeather } from "@/components/weather/current";
import Forecast from "@/components/weather/forecast";
import { getWeather, getForecast } from "@/lib/weather";

const Home: React.FC = () => {
  const [coords, setCoords] = useState<{lat: string; lon: string} | null>(null);
  const [hasSearched, setHasSearched] = useState(false);

  // Clear localStorage on page load/reload
  useEffect(() => {
    // Clear previous search data
    localStorage.removeItem("lastSearch");
    localStorage.removeItem("hasSearched");
    localStorage.removeItem("recentSearches");
    
    // Reset states
    setCoords(null);
    setHasSearched(false);
  }, []);

  // Save last search to localStorage when user searches
  useEffect(() => {
    if (coords && hasSearched) {
      try {
        localStorage.setItem("lastSearch", JSON.stringify(coords));
        localStorage.setItem("hasSearched", "true");
      } catch (error) {
        console.error("Failed to save last search:", error);
      }
    }
  }, [coords, hasSearched]);

  const weather = useQuery({
    queryKey: ["weather", coords?.lat, coords?.lon],
    queryFn: () => coords ? getWeather(coords.lat, coords.lon) : null,
    enabled: !!coords && hasSearched,
    staleTime: 1000 * 60 * 10, // 10 minutes
  });

  const forecast = useQuery({
    queryKey: ["forecast", coords?.lat, coords?.lon],
    queryFn: () => coords ? getForecast(coords.lat, coords.lon) : null,
    enabled: !!coords && hasSearched,
    staleTime: 1000 * 60 * 10, // 10 minutes
  });

  const handleSearch = useCallback((lat: string, lon: string) => {
    setCoords({ lat, lon });
    setHasSearched(true);
  }, []);

  return (
    <div className="container mx-auto px-4 py-6 sm:py-8 md:py-10">
      <div className="max-w-4xl mx-auto">
        <div className="w-full flex justify-center mb-6 sm:mb-8">
          <Search onSearch={handleSearch} />
        </div>

        {!hasSearched ? (
          <div className="text-center py-8 sm:py-12">
            <h2 className="text-lg sm:text-xl font-medium mb-2 text-gray-700 dark:text-gray-300">
              Welcome to Weather Forecast
            </h2>
            <p className="text-muted-foreground">
              Search for a city above to see the current weather and forecast
            </p>
          </div>
        ) : weather.isLoading || forecast.isLoading ? (
          <Card className="w-full max-w-md mx-auto p-4 sm:p-6">
            <div className="animate-pulse space-y-4">
              <div className="h-4 bg-muted rounded w-3/4"></div>
              <div className="h-8 bg-muted rounded w-1/2"></div>
              <div className="h-4 bg-muted rounded w-full"></div>
            </div>
          </Card>
        ) : weather.error || forecast.error ? (
          <Card className="w-full max-w-md mx-auto p-4 sm:p-6 text-center text-destructive">
            {(weather.error as Error)?.message || (forecast.error as Error)?.message || "Error loading weather data"}
          </Card>
        ) : weather.data && forecast.data ? (
          <div className="space-y-6 sm:space-y-8">
            <CurrentWeather weather={weather.data} />
            <Forecast forecast={forecast.data} />
          </div>
        ) : (
          <div className="text-center py-8 sm:py-12">
            <h2 className="text-lg sm:text-xl font-medium mb-2 text-gray-700 dark:text-gray-300">
              No results found
            </h2>
            <p className="text-muted-foreground">
              Try searching for a different city
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export default Home; 